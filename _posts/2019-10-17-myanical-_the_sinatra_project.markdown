---
layout: post
title:      "MyAniCal- The Sinatra Project"
date:       2019-10-17 04:30:09 +0000
permalink:  myanical-_the_sinatra_project
---


Coming into the Sinatra Project I didn't entirely know where to to start. When I first started out on my journey to learn software engineering at Flatiron School, I a had already had ideas for each of the projects that I wanted to build throughout the program. Of course me being the geek I am, decided to create something practical and useful for me, enter MyAnimeCal.

I've always been a really huge anime fan and the inspiration for more MyAniCal really came from a place of wanting to be able to organize and keep track of the different shows that I would watch on a weekly basis. I wanted to be able to enjoy the anime that I enjoyed but at the same time keep myself and on schedule. Part of that came from me being enrolled in Flatiron School full-time. We all need our breaks from time to time and one of my favorite ways to pass the time is to watch some of my favorite shows. 

This project was really fun and somewhat difficult for me in some aspects, at least at first. Sinatra itself was relatively straight forward and easy to understand. It was so excited to graduate from CLI space to a full blown web application and Sinatra was a great start. What I struggled with most was getting a better understanding of RESTful Routes, CRUD(Create, Read, Update, DELETE) and the HTTP Action Verbs involved in each process.

Rather than just doing the minimum and just implementing the required CRUD functionality, me being me made things a lot more challenging on myself and decided to incorporate an API into my application. I felt it was a lot more fitting to be able to access the Jikan API(An unofficial API for the MyAnimeList.net website) because I wanted to give the user to add the option to add the anime to their schedule in the simplest way possible, marking off a checkbox in a form. Using the API was rather straightforward once I learned what I needed to do in order to access the data provide by the API. I ended up using the JSON and Rest-Client rRuby gems to be able to access the information and created a completely seperate class for the to seperate the concerns of the API from the rest of the models in my program. 

The next step for me was to then create the associations in ActiveRecord. This took a lot of time and I actually ended up going with a many to many relationship for my project after talk through these relationships  with my cohort lead and a classmate of mine. In order to make this this work we create models for the User, Anime and User Schedule which served as a join table to associate the two by their IDs. At first this worked well enough for what I was trying to do but I hit a road block when it came time to add an anime to the user's schedule: the checkbox.

All of the other projects that I had seen had gone with a straigh forward text input form that that would then be used throughout the required CRUD Operations. Mine was different and was made solely out of checkboxes inputs that allowed the user to select the all of the anime by the day of the week on which it aired and then add it to there calendar. I honestly had no idea how complicated it was to use a mult-checkbox form and how to go about associating each of the title the user had selected. It wasn't until my class mate point me in the right direction did I find that I needed to change the way the name was set up inside of the checkbox's input form to store an empty set of brackets in which to store the user's selection as an array. That missing piece to get that part working and in short bring my project to where I wanted it to be. At least that's what I had thought.

My class mate brough up one key piece that I was missing in my application, the Create and Delete part of CRUD. Since I had my user schedule set up in a way to allow them to check off the anime they wanted to add to their schedule it techically only fullfilled the Update Read and Update part but because I pulled all of that information from the API the user had nothing to actually create or delete. As I thought I was about to put the finishing touches on my project this find put brought my progress to a screeching halt as I had to figure out how to implement those aspects back into my program. After a little brain storming I decided to add a feature that would allow the user to create, edit and delete review that they would right about any anime they had on their schedule.

This of course required a couple of minor tweaks to the models and the migrations that I had previously established and by simply adding another join table that establshed a relationship between a specific anime and user by their IDs as well as establishing an association where a review belongs to both a user and an anime. At this point I was on the right track but I still had one glaring weakness that continued to creep up on me: RESTful Routes and the HTTP Action Verbs associated to each of the CRUD Operations.

Getting an understanding of CRUD and the HTTP actions associated with each operation didn't fully come for me until I had to completely switch gears from my original direction but I'm honestly glad that I did. Adding the the reviews feature to my application not only made my application more robust but it also helped me get a better understanding off CRUD and the HTTP Actions and the RESTful Routes associated with them. Even though it took me more more time to complete, I'm honestly glad I did because it helped me level up with a concept I previously struggled with, ultimately making me a better developer in the process.
